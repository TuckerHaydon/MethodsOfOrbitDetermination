classdef EGM96GravitationalAccelerationJacobianTests < matlab.unittest.TestCase
    methods (Test)
        function TestScalarWithFiniteDifference(testCase)   
                
            earth_gravitational_parameter = 3986004.415E+8;
            earth_radius                  = 6378136.3;

            position_itrf = transpose([
                earth_radius + 100e3, 0, 0; 
            ]);

            dx = 5; % meters
            perturbed_position_itrf = [
                position_itrf + [dx; 0; 0], ...
                position_itrf - [dx; 0; 0], ...
                position_itrf + [0; dx; 0], ...
                position_itrf - [0; dx; 0], ...
                position_itrf + [0; 0; dx], ...
                position_itrf - [0; 0; dx]
            ];

            % J2 for the EGM96 model.
            J2 = 0.00108262668355315;
            [perturbed_gravitational_acceleration_itrf] = ECEFJ2GravitationalAcceleration( ...
                    perturbed_position_itrf, ...
                    earth_gravitational_parameter, ...
                    earth_radius, ...
                    J2);

            expected_gravitational_acceleration_jacobian_itrf = [
                (perturbed_gravitational_acceleration_itrf(:, 1) - perturbed_gravitational_acceleration_itrf(:, 2)) ./ (2 * dx);
                (perturbed_gravitational_acceleration_itrf(:, 3) - perturbed_gravitational_acceleration_itrf(:, 4)) ./ (2 * dx);
                (perturbed_gravitational_acceleration_itrf(:, 5) - perturbed_gravitational_acceleration_itrf(:, 6)) ./ (2 * dx);
            ];
            expected_gravitational_acceleration_jacobian_itrf = reshape(expected_gravitational_acceleration_jacobian_itrf, 3, 3, []);

            [gravitational_acceleration_jacobian_itrf] = ...
                EGM96GravitationalAccelerationJacobian(...
                    position_itrf, ...
                    earth_gravitational_parameter, ...
                    earth_radius);

            testCase.verifyEqual( ...
                gravitational_acceleration_jacobian_itrf, ...
                expected_gravitational_acceleration_jacobian_itrf, ...
                'AbsTol', 1e-9);  
        end

        function TestVectorWithFiniteDifference(testCase)   
                
            earth_gravitational_parameter = 3986004.415E+8;
            earth_radius                  = 6378136.3;

            position_itrf = transpose([
                earth_radius + 100e3, 0, 0; 
                earth_radius/sqrt(2) + 100e3, earth_radius/sqrt(2), 0; 
                earth_radius/sqrt(2) + 100e3, earth_radius/sqrt(2), 500e3; 
            ]);

            dx = 5; % meters
            perturbed_position_itrf = [
                position_itrf + [dx; 0; 0], ...
                position_itrf - [dx; 0; 0], ...
                position_itrf + [0; dx; 0], ...
                position_itrf - [0; dx; 0], ...
                position_itrf + [0; 0; dx], ...
                position_itrf - [0; 0; dx]
            ];

            % J2 for the EGM96 model.
            J2 = 0.00108262668355315;
            [perturbed_gravitational_acceleration_itrf] = ECEFJ2GravitationalAcceleration( ...
                    perturbed_position_itrf, ...
                    earth_gravitational_parameter, ...
                    earth_radius, ...
                    J2);

            expected_gravitational_acceleration_jacobian_itrf = [
                (perturbed_gravitational_acceleration_itrf(:, 1:3) - perturbed_gravitational_acceleration_itrf(:, 4:6)) ./ (2 * dx);
                (perturbed_gravitational_acceleration_itrf(:, 7:9) - perturbed_gravitational_acceleration_itrf(:, 10:12)) ./ (2 * dx);
                (perturbed_gravitational_acceleration_itrf(:, 13:15) - perturbed_gravitational_acceleration_itrf(:, 16:18)) ./ (2 * dx);
            ];
            expected_gravitational_acceleration_jacobian_itrf = reshape(expected_gravitational_acceleration_jacobian_itrf, 3, 3, []);

            [gravitational_acceleration_jacobian_itrf] = ...
                EGM96GravitationalAccelerationJacobian(...
                    position_itrf, ...
                    earth_gravitational_parameter, ...
                    earth_radius);

            testCase.verifyEqual( ...
                gravitational_acceleration_jacobian_itrf, ...
                expected_gravitational_acceleration_jacobian_itrf, ...
                'AbsTol', 1e-8);  
        end

        function TestVectorWithEGM96FiniteDifference(testCase)   
                
            earth_gravitational_parameter = 3986004.415E+8;
            earth_radius                  = 6378136.3;

            position_itrf = transpose([
                earth_radius + 100e3, 0, 0; 
                earth_radius/sqrt(2) + 100e3, earth_radius/sqrt(2), 0; 
                earth_radius/sqrt(2) + 100e3, earth_radius/sqrt(2), 500e3; 
            ]);

            dx = 5; % meters
            perturbed_position_itrf = [
                position_itrf + [dx; 0; 0], ...
                position_itrf - [dx; 0; 0], ...
                position_itrf + [0; dx; 0], ...
                position_itrf - [0; dx; 0], ...
                position_itrf + [0; 0; dx], ...
                position_itrf - [0; 0; dx]
            ];

            % Use full order 20 model
            [perturbed_gravitational_acceleration_itrf] = EGM96GravitationalAcceleration( ...
                    perturbed_position_itrf, ...
                    earth_gravitational_parameter, ...
                    earth_radius, ...
                    20);

            expected_gravitational_acceleration_jacobian_itrf = [
                (perturbed_gravitational_acceleration_itrf(:, 1:3) - perturbed_gravitational_acceleration_itrf(:, 4:6)) ./ (2 * dx);
                (perturbed_gravitational_acceleration_itrf(:, 7:9) - perturbed_gravitational_acceleration_itrf(:, 10:12)) ./ (2 * dx);
                (perturbed_gravitational_acceleration_itrf(:, 13:15) - perturbed_gravitational_acceleration_itrf(:, 16:18)) ./ (2 * dx);
            ];
            expected_gravitational_acceleration_jacobian_itrf = reshape(expected_gravitational_acceleration_jacobian_itrf, 3, 3, []);

            [gravitational_acceleration_jacobian_itrf] = ...
                EGM96GravitationalAccelerationJacobian(...
                    position_itrf, ...
                    earth_gravitational_parameter, ...
                    earth_radius);

            testCase.verifyEqual( ...
                gravitational_acceleration_jacobian_itrf, ...
                expected_gravitational_acceleration_jacobian_itrf, ...
                'AbsTol', 1e-8);  
        end
    end
end