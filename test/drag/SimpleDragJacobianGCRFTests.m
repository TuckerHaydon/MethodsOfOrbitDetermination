classdef SimpleDragJacobianGCRFTests < matlab.unittest.TestCase
    methods (Test)
        function TestSingleVectorAgainstFiniteDifference(testCase)

            position_gcrf = transpose([ ...
                -5971.19544867343, 3945.58315019255, 2864.53021742433; ...
            ]) .* 1e3;
            velocity_gcrf = transpose([ ...
                0.049002818030, -4.185030861883, 5.848985672439; ...
            ]) .* 1e3;
            coefficient_of_drag       = 2;
            effective_area            = 3.6;
            mass                      = 1350;
            reference_air_density     = 4e-13;
            reference_radial_distance = 7298.145e3;
            decay_rate                = 200e3;
            earth_rotation_rate       = 7e-5;

            dx = 0.01;
            dv = 0.01;
            dc = 0.001;

            perturbed_position_gcrf = [ ...
                position_gcrf + [dx; 0; 0], ...
                position_gcrf - [dx; 0; 0], ...
                position_gcrf + [0; dx; 0], ...
                position_gcrf - [0; dx; 0], ...
                position_gcrf + [0; 0; dx], ...
                position_gcrf - [0; 0; dx], ...
                position_gcrf + [0; 0; 0], ...
                position_gcrf - [0; 0; 0], ...
                position_gcrf + [0; 0; 0], ...
                position_gcrf - [0; 0; 0], ...
                position_gcrf + [0; 0; 0], ...
                position_gcrf - [0; 0; 0], ...
                position_gcrf + [0; 0; 0], ...
                position_gcrf - [0; 0; 0]
            ];

            perturbed_velocity_gcrf = [ ...
                velocity_gcrf + [0; 0; 0], ...
                velocity_gcrf - [0; 0; 0], ...
                velocity_gcrf + [0; 0; 0], ...
                velocity_gcrf - [0; 0; 0], ...
                velocity_gcrf + [0; 0; 0], ...
                velocity_gcrf - [0; 0; 0], ...
                velocity_gcrf + [dv; 0; 0], ...
                velocity_gcrf - [dv; 0; 0], ...
                velocity_gcrf + [0; dv; 0], ...
                velocity_gcrf - [0; dv; 0], ...
                velocity_gcrf + [0; 0; dv], ...
                velocity_gcrf - [0; 0; dv], ...
                velocity_gcrf + [0; 0; 0], ...
                velocity_gcrf - [0; 0; 0]
            ];

            perturbed_coefficient_of_drag = [
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + dc;
                coefficient_of_drag - dc;
            ];

            [perturbed_drag_gcrf] = SimpleDragGCRF(...
                perturbed_position_gcrf, ...
                perturbed_velocity_gcrf, ...
                perturbed_coefficient_of_drag, ...
                effective_area, ...
                mass, ...
                reference_air_density, ...
                reference_radial_distance, ...
                decay_rate, ...
                earth_rotation_rate);

            expected_position_gcrf_jacobian = [
                (perturbed_drag_gcrf(:, 1) - perturbed_drag_gcrf(:, 2)) ./ (2 .* dx), ...
                (perturbed_drag_gcrf(:, 3) - perturbed_drag_gcrf(:, 4)) ./ (2 .* dx), ...
                (perturbed_drag_gcrf(:, 5) - perturbed_drag_gcrf(:, 6)) ./ (2 .* dx);
            ];

            expected_velocity_gcrf_jacobian = [
                (perturbed_drag_gcrf(:, 7) - perturbed_drag_gcrf(:, 8)) ./ (2 .* dv), ...
                (perturbed_drag_gcrf(:, 9) - perturbed_drag_gcrf(:, 10)) ./ (2 .* dv), ...
                (perturbed_drag_gcrf(:, 11) - perturbed_drag_gcrf(:, 12)) ./ (2 .* dv);
            ];

            expected_coefficient_of_drag_jacobian = [
                (perturbed_drag_gcrf(:, 13) - perturbed_drag_gcrf(:, 14)) ./ (2 .* dc);
            ];

            [position_gcrf_jacobian, velocity_gcrf_jacobian, coefficient_of_drag_jacobian] = ...
                SimpleDragJacobianGCRF(...
                    position_gcrf, ...
                    velocity_gcrf, ...
                    coefficient_of_drag, ...
                    effective_area, ...
                    mass, ...
                    reference_air_density, ...
                    reference_radial_distance, ...
                    decay_rate, ...
                    earth_rotation_rate);

            testCase.verifyEqual( ...
                position_gcrf_jacobian, ...
                expected_position_gcrf_jacobian, ...
                'RelTol', 1e-6); 

            testCase.verifyEqual( ...
                velocity_gcrf_jacobian, ...
                expected_velocity_gcrf_jacobian, ...
                'RelTol', 1e-6); 

            testCase.verifyEqual( ...
                coefficient_of_drag_jacobian, ...
                expected_coefficient_of_drag_jacobian, ...
                'RelTol', 1e-6); 
        end

        function TestMultipleVectorAgainstFiniteDifference(testCase)

            position_gcrf = transpose([ ...
                -5971.19544867343, 3945.58315019255, 2864.53021742433;
                5970.19544867343, 3944.58315019255, 2863.53021742433;
            ]) .* 1e3;
            velocity_gcrf = transpose([ ...
                0.049002818030, -4.185030861883, 5.848985672439;
                0.05, -4.5, 5.5;
            ]) .* 1e3;
            coefficient_of_drag       = [2; 2.1];
            effective_area            = 3.6;
            mass                      = 1350;
            reference_air_density     = 4e-13;
            reference_radial_distance = 7298.145e3;
            decay_rate                = 200e3;
            earth_rotation_rate       = 7e-5;

            dx = 0.01;
            dv = 0.01;
            dc = 0.001;

            perturbed_position_gcrf = [ ...
                position_gcrf + [dx; 0; 0], ...
                position_gcrf - [dx; 0; 0], ...
                position_gcrf + [0; dx; 0], ...
                position_gcrf - [0; dx; 0], ...
                position_gcrf + [0; 0; dx], ...
                position_gcrf - [0; 0; dx], ...
                position_gcrf + [0; 0; 0], ...
                position_gcrf - [0; 0; 0], ...
                position_gcrf + [0; 0; 0], ...
                position_gcrf - [0; 0; 0], ...
                position_gcrf + [0; 0; 0], ...
                position_gcrf - [0; 0; 0], ...
                position_gcrf + [0; 0; 0], ...
                position_gcrf - [0; 0; 0]
            ];

            perturbed_velocity_gcrf = [ ...
                velocity_gcrf + [0; 0; 0], ...
                velocity_gcrf - [0; 0; 0], ...
                velocity_gcrf + [0; 0; 0], ...
                velocity_gcrf - [0; 0; 0], ...
                velocity_gcrf + [0; 0; 0], ...
                velocity_gcrf - [0; 0; 0], ...
                velocity_gcrf + [dv; 0; 0], ...
                velocity_gcrf - [dv; 0; 0], ...
                velocity_gcrf + [0; dv; 0], ...
                velocity_gcrf - [0; dv; 0], ...
                velocity_gcrf + [0; 0; dv], ...
                velocity_gcrf - [0; 0; dv], ...
                velocity_gcrf + [0; 0; 0], ...
                velocity_gcrf - [0; 0; 0]
            ];

            perturbed_coefficient_of_drag = [
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + 0;
                coefficient_of_drag + dc;
                coefficient_of_drag - dc;
            ];

            [perturbed_drag_gcrf] = SimpleDragGCRF(...
                perturbed_position_gcrf, ...
                perturbed_velocity_gcrf, ...
                perturbed_coefficient_of_drag, ...
                effective_area, ...
                mass, ...
                reference_air_density, ...
                reference_radial_distance, ...
                decay_rate, ...
                earth_rotation_rate);

            expected_position_gcrf_jacobian(:, :, 1) = [
                (perturbed_drag_gcrf(:, 1) - perturbed_drag_gcrf(:, 3)) ./ (2 .* dx), ...
                (perturbed_drag_gcrf(:, 5) - perturbed_drag_gcrf(:, 7)) ./ (2 .* dx), ...
                (perturbed_drag_gcrf(:, 9) - perturbed_drag_gcrf(:, 11)) ./ (2 .* dx);
            ];

            expected_position_gcrf_jacobian(:, :, 2) = [
                (perturbed_drag_gcrf(:, 2) - perturbed_drag_gcrf(:, 4)) ./ (2 .* dx), ...
                (perturbed_drag_gcrf(:, 6) - perturbed_drag_gcrf(:, 8)) ./ (2 .* dx), ...
                (perturbed_drag_gcrf(:, 10) - perturbed_drag_gcrf(:, 12)) ./ (2 .* dx);
            ];

            expected_velocity_gcrf_jacobian(:, :, 1) = [
                (perturbed_drag_gcrf(:, 13) - perturbed_drag_gcrf(:, 15)) ./ (2 .* dv), ...
                (perturbed_drag_gcrf(:, 17) - perturbed_drag_gcrf(:, 19)) ./ (2 .* dv), ...
                (perturbed_drag_gcrf(:, 21) - perturbed_drag_gcrf(:, 23)) ./ (2 .* dv);
            ];

            expected_velocity_gcrf_jacobian(:, :, 2) = [
                (perturbed_drag_gcrf(:, 14) - perturbed_drag_gcrf(:, 16)) ./ (2 .* dv), ...
                (perturbed_drag_gcrf(:, 18) - perturbed_drag_gcrf(:, 20)) ./ (2 .* dv), ...
                (perturbed_drag_gcrf(:, 22) - perturbed_drag_gcrf(:, 24)) ./ (2 .* dv);
            ];


            expected_coefficient_of_drag_jacobian(:, :, 1) = [
                (perturbed_drag_gcrf(:, 25) - perturbed_drag_gcrf(:, 27)) ./ (2 .* dc);
            ];

            expected_coefficient_of_drag_jacobian(:, :, 2) = [
                (perturbed_drag_gcrf(:, 26) - perturbed_drag_gcrf(:, 28)) ./ (2 .* dc);
            ];

            [position_gcrf_jacobian, velocity_gcrf_jacobian, coefficient_of_drag_jacobian] = ...
                SimpleDragJacobianGCRF(...
                    position_gcrf, ...
                    velocity_gcrf, ...
                    coefficient_of_drag, ...
                    effective_area, ...
                    mass, ...
                    reference_air_density, ...
                    reference_radial_distance, ...
                    decay_rate, ...
                    earth_rotation_rate);

            testCase.verifyEqual( ...
                position_gcrf_jacobian, ...
                expected_position_gcrf_jacobian, ...
                'RelTol', 1e-6); 

            testCase.verifyEqual( ...
                velocity_gcrf_jacobian, ...
                expected_velocity_gcrf_jacobian, ...
                'RelTol', 1e-6); 

            testCase.verifyEqual( ...
                coefficient_of_drag_jacobian, ...
                expected_coefficient_of_drag_jacobian, ...
                'RelTol', 1e-6); 
        end
    end
end