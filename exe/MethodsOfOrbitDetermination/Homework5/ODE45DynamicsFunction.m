function [d_dt_state] = ODE45DynamicsFunction(...
        integration_time, ...
        state, ...
        state_parameters, ...
        time_parameters, ...
        gravity_parameters, ...
        drag_parameters, ...
        structure_parameters)
    
    % Reshape the state so its a [num_states, N] set of appended state vectors.
    state = reshape(state, state_parameters.num_states, []);

    % Unpack the state samples
    satellite_position_gcrf = state(1:3, :);
    satellite_velocity_gcrf = state(4:6, :);
    coefficient_of_drag     = state(7, :);

    % Convert integration time to UTC date time
    utc_time = IntegrationTimeToDateTime(integration_time);

    % Push the state samples through the dynamics function
    [d_dt_satellite_position_gcrf, d_dt_satellite_velocity_gcrf, d_dt_coefficient_of_drag] = ...
        DynamicsFunction(...
            utc_time, ...
            satellite_position_gcrf, ...
            satellite_velocity_gcrf, ...
            coefficient_of_drag, ...
            time_parameters, ...
            gravity_parameters, ...
            drag_parameters, ...
            structure_parameters);

    % Pack the state samples
    d_dt_state = [
        d_dt_satellite_position_gcrf; 
        d_dt_satellite_velocity_gcrf; 
        reshape(d_dt_coefficient_of_drag, 1, []);
    ];

    % Reshape back into a column vector
    d_dt_state = d_dt_state(:);
end