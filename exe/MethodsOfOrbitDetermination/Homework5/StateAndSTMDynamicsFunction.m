function [d_dt_satellite_position_gcrf, d_dt_satellite_velocity_gcrf, d_dt_coefficient_of_drag, d_dt_state_transition_matrix] = ...
    StateAndSTMDynamicsFunction(...
        utc_time, ...
        satellite_position_gcrf, ...
        satellite_velocity_gcrf, ...
        coefficient_of_drag, ...
        state_transition_matrix, ...
        time_parameters, ...
        gravity_parameters, ...
        drag_parameters, ...
        structure_parameters)
    arguments(Input)
        utc_time(1, 1) datetime
        satellite_position_gcrf(3, :) double {mustBeReal, mustBeFinite}
        satellite_velocity_gcrf(3, :) double {mustBeReal, mustBeFinite}
        coefficient_of_drag(:, 1) double {mustBeReal, mustBeFinite}
        state_transition_matrix(:, :) double {mustBeReal, mustBeFinite}
        time_parameters(1, 1) struct
        gravity_parameters(1, 1) struct
        drag_parameters(1, 1) struct
        structure_parameters(1, 1) struct
    end

    arguments(Output)
        d_dt_satellite_position_gcrf(3, :) double {mustBeReal, mustBeFinite}
        d_dt_satellite_velocity_gcrf(3, :) double {mustBeReal, mustBeFinite}
        d_dt_coefficient_of_drag(:, 1) double {mustBeReal, mustBeFinite}
        d_dt_state_transition_matrix(:, :) double {mustBeReal, mustBeFinite}
    end

    % Input check
    num_vectors = size(satellite_position_gcrf, 2);
    assert(size(satellite_velocity_gcrf, 2) == num_vectors);
    assert(numel(coefficient_of_drag) == num_vectors);

    assert(isfield(time_parameters, 'ut1_utc_sec'));
    assert(isfield(time_parameters, 'polar_motion_deg'));
    assert(isfield(time_parameters, 'longitude_earth_orientation_parameter_deg'));
    assert(isfield(time_parameters, 'obliquity_earth_orientation_parameter_deg'));
    assert(isfield(time_parameters, 'length_of_day_earth_orientation_parameter_sec'));

    assert(isfield(gravity_parameters, 'earth_gravitational_parameter'));
    assert(isfield(gravity_parameters, 'earth_radius'));
    assert(isfield(gravity_parameters, 'spherical_harmonic_degree'));
    assert(isfield(gravity_parameters, 'moon_gravitational_parameter'));
    assert(isfield(gravity_parameters, 'sun_gravitational_parameter'));

    assert(isfield(drag_parameters, 'mass'));
    assert(isfield(drag_parameters, 'reference_air_density'));
    assert(isfield(drag_parameters, 'reference_radial_distance'));
    assert(isfield(drag_parameters, 'decay_rate'));
    assert(isfield(drag_parameters, 'earth_rotation_rate'));

    assert(isfield(structure_parameters, 'facet_descriptions'));
    assert(isfield(structure_parameters, 'facet_orientations_body'));
    assert(isfield(structure_parameters, 'facet_areas'));
    assert(isfield(structure_parameters, 'diffuse_reflection_coefficients'));
    assert(isfield(structure_parameters, 'specular_reflection_coefficients'));


    %% Preprocessing
    % (1) Time
    converted_time = ConvertUTCTime( ...
        utc_time, ...
        time_parameters.ut1_utc_sec);

    % (2) Coordinate frames
    [C_itrf2gcrf, C_itrf2pef, C_pef2tod, C_tod2mod, C_mod2gcrf, R_dot, omega] = ...
        ComputeITRF2GCRF1976TransformParameters(...
            utc_time, ...
            time_parameters.ut1_utc_sec, ...
            time_parameters.polar_motion_deg, ...
            time_parameters.longitude_earth_orientation_parameter_deg, ...
            time_parameters.obliquity_earth_orientation_parameter_deg, ...
            time_parameters.length_of_day_earth_orientation_parameter_sec);

    C_gcrf2itrf = transpose(C_itrf2gcrf);

    satellite_position_itrf = C_gcrf2itrf * satellite_position_gcrf;

    % (3) Sun/Moon Position
    sun_position_tod = ComputeSunPositionTOD( ...
        converted_time.ut1, ...
        converted_time.tdb);
    sun_position_gcrf = C_mod2gcrf * C_tod2mod * sun_position_tod;

    moon_position_tod = ComputeMoonPositionTOD( ...
        converted_time.tdb, ...
        gravity_parameters.earth_radius);
    moon_position_gcrf = C_mod2gcrf * C_tod2mod * moon_position_tod;

    % (4) Effective drag area
    relative_sun_position_gcrf  = sun_position_gcrf - satellite_position_gcrf;
    relative_sun_direction_gcrf = relative_sun_position_gcrf ./ vecnorm(relative_sun_position_gcrf, 2, 1);
    velocity_direction_gcrf     = satellite_velocity_gcrf ./ vecnorm(satellite_velocity_gcrf, 2, 1);
    
    % Transform from Transverse-Normal-Radial (body XYZ) to GCRF.
    C_body2gcrf = AttitudeTNRToGCRF( ...
            satellite_position_gcrf, ...
            satellite_velocity_gcrf);
    
    % Transform facet orientations from body frame to GCRF frame.
    facet_orientations_gcrf = pagemtimes(...
        C_body2gcrf, ...
        structure_parameters.facet_orientations_body);
    
    % Add solar panel facet orientation.
    solar_panel_facet_mask = strcmp(structure_parameters.facet_descriptions, "Solar");
    if any(solar_panel_facet_mask)
        facet_orientations_gcrf(:, solar_panel_facet_mask, :) = relative_sun_direction_gcrf;
    end
    
    facet_areas = repmat(structure_parameters.facet_areas, [1, num_vectors]);
    
    % Ignore the fact that the solar panel is backwards in the drag computation
    ignore_facet_backwards = false(size(facet_areas));
    if any(solar_panel_facet_mask)
        ignore_facet_backwards(solar_panel_facet_mask, :) = true;
    end
    
    % Compute the effective area subject to drag
    effective_drag_area = ComputeEffectiveDragArea( ...
            velocity_direction_gcrf, ...
            facet_orientations_gcrf, ...
            facet_areas, ...
            ignore_facet_backwards);

    %% State Dynamics
    % (1) Earth Gravity
    earth_gravitational_acceleration_itrf = EGM96GravitationalAcceleration(...
        satellite_position_itrf, ...
        gravity_parameters.earth_gravitational_parameter, ...
        gravity_parameters.earth_radius, ...
        gravity_parameters.spherical_harmonic_degree);

    earth_gravitational_acceleration_gcrf = C_itrf2gcrf * earth_gravitational_acceleration_itrf;

    % (2) Drag
    drag_acceleration_gcrf = zeros(size(earth_gravitational_acceleration_itrf));
    drag_acceleration_gcrf = SimpleDragGCRF(...
        satellite_position_gcrf, ...
        satellite_velocity_gcrf, ...
        coefficient_of_drag, ...
        effective_drag_area, ...
        drag_parameters.mass, ...
        drag_parameters.reference_air_density, ...
        drag_parameters.reference_radial_distance, ...
        drag_parameters.decay_rate, ...
        drag_parameters.earth_rotation_rate);

    % (3) Sun and Moon Gravity
    moon_gravitational_acceleration_gcrf = zeros(size(earth_gravitational_acceleration_itrf));
    moon_gravitational_acceleration_gcrf = ...
        ThirdBodyPerturbingAccelerationGCRF(...
            satellite_position_gcrf, ...
            moon_position_gcrf, ...
            gravity_parameters.moon_gravitational_parameter);

    sun_gravitational_acceleration_gcrf = zeros(size(earth_gravitational_acceleration_itrf));
    sun_gravitational_acceleration_gcrf = ...
        ThirdBodyPerturbingAccelerationGCRF(...
            satellite_position_gcrf, ...
            sun_position_gcrf, ...
            gravity_parameters.sun_gravitational_parameter);

    % (4) Solar Radiation Pressure
    % warning("Solar radiation pressure not yet implemented!");
    solar_radiation_pressure_acceleration_gcrf = zeros(size(earth_gravitational_acceleration_itrf));

    % Output
    d_dt_satellite_position_gcrf = satellite_velocity_gcrf;

    d_dt_satellite_velocity_gcrf = ...
        earth_gravitational_acceleration_gcrf + ...
        drag_acceleration_gcrf + ...
        moon_gravitational_acceleration_gcrf + ...
        sun_gravitational_acceleration_gcrf + ...
        solar_radiation_pressure_acceleration_gcrf;

    d_dt_coefficient_of_drag = zeros(size(coefficient_of_drag));

    %% State transition matrix dynamics
    earth_gravitational_acceleration_position_jacobian_itrf = ...
        EGM96GravitationalAccelerationJacobian(...
            satellite_position_itrf, ...
            gravity_parameters.earth_gravitational_parameter, ...
            gravity_parameters.earth_radius);
    
    earth_gravitational_acceleration_position_jacobian_gcrf = ...
        C_itrf2gcrf * earth_gravitational_acceleration_position_jacobian_itrf * transpose(C_itrf2gcrf);
    
    [drag_position_gcrf_jacobian, drag_velocity_gcrf_jacobian, drag_coefficient_of_drag_jacobian] = ...
        SimpleDragJacobianGCRF(...
            satellite_position_gcrf, ...
            satellite_velocity_gcrf, ...
            coefficient_of_drag, ...
            effective_drag_area, ...
            drag_parameters.mass, ...
            drag_parameters.reference_air_density, ...
            drag_parameters.reference_radial_distance, ...
            drag_parameters.decay_rate, ...
            drag_parameters.earth_rotation_rate);
    
    moon_gravitational_acceleration_position_jacobian_gcrf = ...
        ThirdBodyPerturbingAccelerationJacobianGCRF(...
            satellite_position_gcrf, ...
            moon_position_gcrf, ...
            gravity_parameters.moon_gravitational_parameter);
    
    sun_gravitational_position_jacobian_gcrf = ...
        ThirdBodyPerturbingAccelerationJacobianGCRF(...
            satellite_position_gcrf, ...
            sun_position_gcrf, ...
            gravity_parameters.sun_gravitational_parameter);
    
    A = zeros(7, 7);
    
    A(1:3, 1:3) = zeros(3, 3);
    A(1:3, 4:6) = eye(3);
    A(1:3, 7)   = zeros(3, 1);
    
    A(4:6, 1:3) = ...
        earth_gravitational_acceleration_position_jacobian_gcrf + ...
        drag_position_gcrf_jacobian + ...
        moon_gravitational_acceleration_position_jacobian_gcrf + ...
        sun_gravitational_position_jacobian_gcrf;
    A(4:6, 4:6) = drag_velocity_gcrf_jacobian;
    A(4:6, 7)   = drag_coefficient_of_drag_jacobian;
    
    A(7, 1:3) = zeros(1, 3);
    A(7, 4:6) = zeros(1, 3);
    A(7, 7)   = 0;

    d_dt_state_transition_matrix = A * state_transition_matrix;
end