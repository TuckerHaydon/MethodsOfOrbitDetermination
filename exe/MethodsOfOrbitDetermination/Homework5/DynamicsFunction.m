function [d_dt_satellite_position_gcrf, d_dt_satellite_velocity_gcrf, d_dt_coefficient_of_drag] = DynamicsFunction(...
        utc_time, ...
        satellite_position_gcrf, ...
        satellite_velocity_gcrf, ...
        coefficient_of_drag, ...
        time_parameters, ...
        gravity_parameters, ...
        drag_parameters)
    % Dynamics function.
    %
    % Requires:
    % Returns:
    arguments(Input)
        utc_time(1, 1) datetime
        satellite_position_gcrf(3, :) double {mustBeReal, mustBeFinite}
        satellite_velocity_gcrf(3, :) double {mustBeReal, mustBeFinite}
        coefficient_of_drag(:, 1) double {mustBeReal, mustBeFinite}
        time_parameters(1, 1) struct
        gravity_parameters(1, 1) struct
        drag_parameters(1, 1) struct
    end

    arguments(Output)
        d_dt_satellite_position_gcrf(3, :) double {mustBeReal, mustBeFinite}
        d_dt_satellite_velocity_gcrf(3, :) double {mustBeReal, mustBeFinite}
        d_dt_coefficient_of_drag(:, 1) double {mustBeReal, mustBeFinite}
    end

    % Input check
    num_vectors = size(satellite_position_gcrf, 2);
    assert(size(satellite_velocity_gcrf, 2) == num_vectors);
    assert(numel(coefficient_of_drag) == num_vectors);

    assert(isfield(time_parameters, 'ut1_utc_sec'));
    assert(isfield(time_parameters, 'polar_motion_deg'));
    assert(isfield(time_parameters, 'longitude_earth_orientation_parameter_deg'));
    assert(isfield(time_parameters, 'obliquity_earth_orientation_parameter_deg'));
    assert(isfield(time_parameters, 'length_of_day_earth_orientation_parameter_sec'));

    assert(isfield(gravity_parameters, 'earth_gravitational_parameter'));
    assert(isfield(gravity_parameters, 'earth_radius'));
    assert(isfield(gravity_parameters, 'spherical_harmonic_degree'));
    assert(isfield(gravity_parameters, 'moon_gravitational_parameter'));
    assert(isfield(gravity_parameters, 'sun_gravitational_parameter'));

    assert(isfield(drag_parameters, 'effective_area'));
    assert(isfield(drag_parameters, 'mass'));
    assert(isfield(drag_parameters, 'reference_air_density'));
    assert(isfield(drag_parameters, 'reference_radial_distance'));
    assert(isfield(drag_parameters, 'decay_rate'));
    assert(isfield(drag_parameters, 'earth_rotation_rate'));


    %% Preprocessing
    % (1) Time
    converted_time = ConvertUTCTime( ...
        utc_time, ...
        time_parameters.ut1_utc_sec);

    % (2) Coordinate frames
    [C_itrf2gcrf, C_itrf2pef, C_pef2tod, C_tod2mod, C_mod2gcrf, R_dot, omega] = ...
        ComputeITRF2GCRF1976TransformParameters(...
            utc_time, ...
            time_parameters.ut1_utc_sec, ...
            time_parameters.polar_motion_deg, ...
            time_parameters.longitude_earth_orientation_parameter_deg, ...
            time_parameters.obliquity_earth_orientation_parameter_deg, ...
            time_parameters.length_of_day_earth_orientation_parameter_sec);

    C_gcrf2itrf = transpose(C_itrf2gcrf);

    satellite_position_itrf = C_gcrf2itrf * satellite_position_gcrf;

    %% Dynamics
    % (1) Earth Gravity
    earth_gravitational_acceleration_itrf = EGM96GravitationalAcceleration(...
        satellite_position_itrf, ...
        gravity_parameters.earth_gravitational_parameter, ...
        gravity_parameters.earth_radius, ...
        gravity_parameters.spherical_harmonic_degree);

    earth_gravitational_acceleration_gcrf = C_itrf2gcrf * earth_gravitational_acceleration_itrf;

    % (2) Drag
    drag_acceleration_gcrf = SimpleDragGCRF(...
        satellite_position_gcrf, ...
        satellite_velocity_gcrf, ...
        coefficient_of_drag, ...
        drag_parameters.effective_area, ...
        drag_parameters.mass, ...
        drag_parameters.reference_air_density, ...
        drag_parameters.reference_radial_distance, ...
        drag_parameters.decay_rate, ...
        drag_parameters.earth_rotation_rate);

    % (3) Sun and Moon Gravity
    sun_position_tod = ComputeSunPositionTOD( ...
        converted_time.ut1, ...
        converted_time.tdb);
    sun_position_gcrf = C_mod2gcrf * C_tod2mod * sun_position_tod;

    moon_position_gcrf = ComputeMoonPositionGCRF( ...
        converted_time.tdb, ...
        gravity_parameters.earth_radius);

    moon_gravitational_acceleration_gcrf = ...
        SimpleTwoBodyOffsetGravitationalAccelerationGCRF(...
            (satellite_position_gcrf - moon_position_gcrf), ...
            gravity_parameters.moon_gravitational_parameter);

    sun_gravitational_acceleration_gcrf = ...
        SimpleTwoBodyOffsetGravitationalAccelerationGCRF(...
            (satellite_position_gcrf - sun_position_gcrf), ...
            gravity_parameters.sun_gravitational_parameter);

    % (4) Solar Radiation Pressure
    warning("Solar radiation pressure not yet implemented!");
    solar_radiation_pressure_acceleration_gcrf = zeros(size(drag_acceleration_gcrf));

    % Output
    d_dt_satellite_position_gcrf = satellite_velocity_gcrf;

    d_dt_satellite_velocity_gcrf = ...
        earth_gravitational_acceleration_gcrf + ...
        drag_acceleration_gcrf + ...
        moon_gravitational_acceleration_gcrf + ...
        sun_gravitational_acceleration_gcrf + ...
        solar_radiation_pressure_acceleration_gcrf;

    d_dt_coefficient_of_drag = zeros(size(coefficient_of_drag));
end